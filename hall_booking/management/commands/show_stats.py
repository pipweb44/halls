from django.core.management.base import BaseCommand
from hall_booking.models import Category, Hall, Booking
from django.db.models import Count, Avg, Sum
from datetime import datetime

class Command(BaseCommand):
    help = 'ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=== ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ ==='))
        
        # ุฅุญุตุงุฆูุงุช ุงููุฆุงุช
        self.stdout.write('\n๐ ุฅุญุตุงุฆูุงุช ุงููุฆุงุช:')
        categories = Category.objects.annotate(hall_count=Count('hall'))
        for category in categories:
            self.stdout.write(f'  โข {category.name}: {category.hall_count} ูุงุนุฉ')
        
        # ุฅุญุตุงุฆูุงุช ุงููุงุนุงุช
        self.stdout.write('\n๐ข ุฅุญุตุงุฆูุงุช ุงููุงุนุงุช:')
        total_halls = Hall.objects.count()
        available_halls = Hall.objects.filter(status='available').count()
        avg_price = Hall.objects.aggregate(avg_price=Avg('price_per_hour'))['avg_price']
        avg_capacity = Hall.objects.aggregate(avg_capacity=Avg('capacity'))['avg_capacity']
        
        self.stdout.write(f'  โข ุฅุฌูุงูู ุงููุงุนุงุช: {total_halls}')
        self.stdout.write(f'  โข ุงููุงุนุงุช ุงููุชุงุญุฉ: {available_halls}')
        self.stdout.write(f'  โข ูุชูุณุท ุงูุณุนุฑ ููุณุงุนุฉ: {avg_price:.2f} ุฌููู')
        self.stdout.write(f'  โข ูุชูุณุท ุงูุณุนุฉ: {avg_capacity:.0f} ุดุฎุต')
        
        # ุฅุญุตุงุฆูุงุช ุงูุญุฌูุฒุงุช
        self.stdout.write('\n๐ ุฅุญุตุงุฆูุงุช ุงูุญุฌูุฒุงุช:')
        total_bookings = Booking.objects.count()
        completed_bookings = Booking.objects.filter(status='completed').count()
        approved_bookings = Booking.objects.filter(status='approved').count()
        pending_bookings = Booking.objects.filter(status='pending').count()
        total_revenue = Booking.objects.filter(status='completed').aggregate(total=Sum('total_price'))['total'] or 0
        
        self.stdout.write(f'  โข ุฅุฌูุงูู ุงูุญุฌูุฒุงุช: {total_bookings}')
        self.stdout.write(f'  โข ุงูุญุฌูุฒุงุช ุงูููุชููุฉ: {completed_bookings}')
        self.stdout.write(f'  โข ุงูุญุฌูุฒุงุช ุงูููุงูู ุนูููุง: {approved_bookings}')
        self.stdout.write(f'  โข ุงูุญุฌูุฒุงุช ุงููุนููุฉ: {pending_bookings}')
        self.stdout.write(f'  โข ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช: {total_revenue:.2f} ุฌููู')
        
        # ุฅุญุตุงุฆูุงุช ุญุณุจ ุงููุญุงูุธุงุช
        self.stdout.write('\n๐บ๏ธ ุฅุญุตุงุฆูุงุช ุญุณุจ ุงููุญุงูุธุงุช:')
        halls_by_governorate = {}
        for hall in Hall.objects.all():
            # ุงุณุชุฎุฑุงุฌ ุงุณู ุงููุญุงูุธุฉ ูู ุงุณู ุงููุงุนุฉ
            name_parts = hall.name.split(' - ')
            if len(name_parts) > 1:
                area = name_parts[1]
                # ุชุญุฏูุฏ ุงููุญุงูุธุฉ ุจูุงุกู ุนูู ุงูููุทูุฉ
                governorate = self.get_governorate_from_area(area)
                if governorate:
                    halls_by_governorate[governorate] = halls_by_governorate.get(governorate, 0) + 1
        
        for governorate, count in sorted(halls_by_governorate.items(), key=lambda x: x[1], reverse=True):
            self.stdout.write(f'  โข {governorate}: {count} ูุงุนุฉ')
        
        self.stdout.write('\nโ ุชู ุนุฑุถ ุฌููุน ุงูุฅุญุตุงุฆูุงุช ุจูุฌุงุญ!')

    def get_governorate_from_area(self, area):
        """ุชุญุฏูุฏ ุงููุญุงูุธุฉ ุจูุงุกู ุนูู ุงูููุทูุฉ"""
        governorates = {
            'ุงููุงูุฑุฉ': ['ูุณุท ุงูุจูุฏ', 'ุงููุนุงุฏู', 'ูุฏููุฉ ูุตุฑ', 'ุงูุฒูุงูู', 'ูุตุฑ ุงูุฌุฏูุฏุฉ', 'ุงููุฑุฌ'],
            'ุงูุฅุณููุฏุฑูุฉ': ['ุณููุญุฉ', 'ุณูุฏู ุฌุงุจุฑ', 'ุงูููุชุฒู', 'ุงูุนุฌูู', 'ููุงูู', 'ุณุชุงููู'],
            'ุงูุฌูุฒุฉ': ['ุงูุฏูู', 'ุงููููุฏุณูู', '6 ุฃูุชูุจุฑ', 'ุงูุดูุฎ ุฒุงูุฏ', 'ุงููุฑู', 'ุจููุงู ุงูุฏูุฑูุฑ'],
            'ุงูุดุฑููุฉ': ['ุงูุฒูุงุฒูู', 'ุงูุนุงุดุฑ ูู ุฑูุถุงู', 'ุจูุจูุณ', 'ุฃุจู ูุจูุฑ', 'ูุงููุณ', 'ูููุง'],
            'ุงูุบุฑุจูุฉ': ['ุทูุทุง', 'ุงููุญูุฉ ุงููุจุฑู', 'ุฒูุชู', 'ุณูููุฏ', 'ูุทูุฑ', 'ุจุณููู'],
            'ููุฑ ุงูุดูุฎ': ['ููุฑ ุงูุดูุฎ', 'ุฏุณูู', 'ููู', 'ูุทูุจุณ', 'ุณูุฏู ุณุงูู', 'ุงูุฑูุงุถ'],
            'ุงููููููุฉ': ['ุดุจูู ุงูููู', 'ุณุงุฏุงุช', 'ุฃุดููู', 'ุงูุจุงุฌูุฑ', 'ูููุณูุง', 'ุจุฑูุฉ ุงูุณุจุน'],
            'ุงููููุง': ['ุงููููุง', 'ูุทุงู', 'ุจูู ูุฒุงุฑ', 'ูุบุงุบุฉ', 'ุณูุงููุท', 'ุฃุจู ูุฑูุงุต'],
            'ุฃุณููุท': ['ุฃุณููุท', 'ุฏูุฑูุท', 'ูููููุท', 'ุฃุจููุจ', 'ุงูุจุฏุงุฑู', 'ุณุงุญู ุณููู'],
            'ุณููุงุฌ': ['ุณููุงุฌ', 'ุฃุฎููู', 'ุงูุจูููุง', 'ูุฑุณู', 'ุงูุบูุงูู', 'ุทูุทุง'],
            'ููุง': ['ููุง', 'ููุต', 'ููุงุฏุฉ', 'ุฏุดูุง', 'ุฃุจู ุชุดุช', 'ูุฑุดูุท'],
            'ุงูุฃูุตุฑ': ['ุงูุฃูุตุฑ', 'ุฅุณูุง', 'ุงูุทูุฏ', 'ุจูุงุถุฉ ุงูุนุฑุจ', 'ุงูุฒูููุฉ', 'ุงููุฑูุฉ'],
            'ุฃุณูุงู': ['ุฃุณูุงู', 'ููู ุฃูุจู', 'ุฏุฑุงู', 'ูุตุฑ ุงูููุจุฉ', 'ููุงุจุดุฉ', 'ุฅุฏูู'],
            'ุจูู ุณููู': ['ุจูู ุณููู', 'ุงููุงุณุทู', 'ูุงุตุฑ', 'ุฅููุงุณูุง', 'ุจุจุง', 'ุณูุณุทุง'],
            'ุงููููู': ['ุงููููู', 'ุณููุฑุณ', 'ุทุงููุฉ', 'ุฅุทุณุง', 'ููุณู ุงูุตุฏูู', 'ุฅุจุดูุงู'],
            'ุฏููุงุท': ['ุฏููุงุท', 'ูุงุฑุณููุฑ', 'ุงูุฒุฑูุง', 'ููุฑ ุงูุจุทูุฎ', 'ุงูุฑูุถุฉ', 'ุงูุณุฑู'],
            'ุงูุฏููููุฉ': ['ุงูููุตูุฑุฉ', 'ููุช ุบูุฑ', 'ุฃุฌุง', 'ุงูุณูุจูุงููู', 'ุจูู ุนุจูุฏ', 'ุงูููุฒูุฉ'],
            'ุงูุจุญูุฑุฉ': ['ุฏููููุฑ', 'ููุฑ ุงูุฏูุงุฑ', 'ุฑุดูุฏ', 'ุฅุฏูู', 'ุฃุจู ุงููุทุงููุฑ', 'ุญูุด ุนูุณู'],
            'ุงูุฅุณูุงุนูููุฉ': ['ุงูุฅุณูุงุนูููุฉ', 'ูุงูุฏ', 'ุงูููุทุฑุฉ ุดุฑู', 'ุงูููุทุฑุฉ ุบุฑุจ', 'ุงูุชู ุงููุจูุฑ', 'ุฃุจู ุตููุฑ'],
            'ุจูุฑุณุนูุฏ': ['ุจูุฑุณุนูุฏ', 'ุจูุฑูุคุงุฏ', 'ุงูุนุฑุจ', 'ุงูุฒููุฑ', 'ุงูููุงุฎ', 'ุงูุถูุงุญู'],
            'ุดูุงู ุณููุงุก': ['ุงูุนุฑูุด', 'ุฑูุญ', 'ุจุฆุฑ ุงูุนุจุฏ', 'ูุฎู', 'ุงูุญุณูุฉ', 'ุงูุดูุฎ ุฒููุฏ'],
            'ุฌููุจ ุณููุงุก': ['ุงูุทูุฑ', 'ุณุงูุช ูุงุชุฑูู', 'ุฏูุจ', 'ูููุจุน', 'ุดุฑู ุงูุดูุฎ', 'ุทุงุจุง'],
            'ุงูุจุญุฑ ุงูุฃุญูุฑ': ['ุงูุบุฑุฏูุฉ', 'ุฑุฃุณ ุบุงุฑุจ', 'ุณูุงุฌุง', 'ุงููุตูุฑ', 'ูุฑุณู ุนูู', 'ุจุฑููุณ'],
            'ุงููุงุฏู ุงูุฌุฏูุฏ': ['ุงูุฎุงุฑุฌุฉ', 'ุงูุฏุงุฎูุฉ', 'ุงููุฑุงูุฑุฉ', 'ุจุงุฑูุณ', 'ููุท', 'ุจูุงุท'],
            'ูุทุฑูุญ': ['ูุฑุณู ูุทุฑูุญ', 'ุณูุฏู ุจุฑุงูู', 'ุงูุณููู', 'ุณููุฉ', 'ุงููุฌููุฉ', 'ุฑุงุณ ุงูุญููุฉ']
        }
        
        for governorate, areas in governorates.items():
            if area in areas:
                return governorate
        return None 